/*
 * Copyright (C) 2016 Naver Corp.All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *  * Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 *  * Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS ``AS IS'' AND ANY
 * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
 * PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR
 * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
 * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
 * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
 * PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
 * OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

#pragma once

#include <android/view/InputEvent.h>

namespace android {
namespace view {

class KeyEventPrivate;

class KeyEvent : public InputEvent {
    friend class KeyEventPrivate;
public:
    // getAction() value: the key has been pressed down.
    static const int32_t ACTION_DOWN = 0;
    // getAction() value: multiple duplicate key events have occurred in a row, or a complex string is being delivered.
    static const int32_t ACTION_MULTIPLE = 2;
    // getAction() value: the key has been released.
    static const int32_t ACTION_UP = 1;
    // When associated with up key events, this indicates that the key press has been canceled.
    static const int32_t FLAG_CANCELED = 32;
    // Set when a key event has FLAG_CANCELED set because a long press action was executed while it was down.
    static const int32_t FLAG_CANCELED_LONG_PRESS = 256;
    // This mask is used for compatibility, to identify enter keys that are coming from an IME whose enter key has been auto-labelled "next" or "done".
    static const int32_t FLAG_EDITOR_ACTION = 16;
    // Set when a key event has been synthesized to implement default behavior for an event that the application did not handle.
    static const int32_t FLAG_FALLBACK = 1024;
    // This mask is set if an event was known to come from a trusted part of the system.
    static const int32_t FLAG_FROM_SYSTEM = 8;
    // This mask is set if we don't want the key event to cause us to leave touch mode.
    static const int32_t FLAG_KEEP_TOUCH_MODE = 4;
    // This flag is set for the first key repeat that occurs after the long press timeout.
    static const int32_t FLAG_LONG_PRESS = 128;
    // This mask is set if the key event was generated by a software keyboard.
    static const int32_t FLAG_SOFT_KEYBOARD = 2;
    // Set for ACTION_UP when this event's key code is still being tracked from its initial down.
    static const int32_t FLAG_TRACKING = 512;
    // This key event was generated by a virtual (on-screen) hard key area.
    static const int32_t FLAG_VIRTUAL_HARD_KEY = 64;
    // This constant was deprecated in API level 20. This flag will never be set by the system since the system consumes all wake keys itself.
    static const int32_t FLAG_WOKE_HERE = 1;
    // Key code constant: '0' key.
    static const int32_t KEYCODE_0 = 7;
    // Key code constant: '1' key.
    static const int32_t KEYCODE_1 = 8;
    // Key code constant: '11' key.
    static const int32_t KEYCODE_11 = 227;
    // Key code constant: '12' key.
    static const int32_t KEYCODE_12 = 228;
    // Key code constant: '2' key.
    static const int32_t KEYCODE_2 = 9;
    // Key code constant: '3' key.
    static const int32_t KEYCODE_3 = 10;
    // Key code constant: 3D Mode key.
    static const int32_t KEYCODE_3D_MODE = 206;
    // Key code constant: '4' key.
    static const int32_t KEYCODE_4 = 11;
    // Key code constant: '5' key.
    static const int32_t KEYCODE_5 = 12;
    // Key code constant: '6' key.
    static const int32_t KEYCODE_6 = 13;
    // Key code constant: '7' key.
    static const int32_t KEYCODE_7 = 14;
    // Key code constant: '8' key.
    static const int32_t KEYCODE_8 = 15;
    // Key code constant: '9' key.
    static const int32_t KEYCODE_9 = 16;
    // Key code constant: 'A' key.
    static const int32_t KEYCODE_A = 29;
    // Key code constant: Left Alt modifier key.
    static const int32_t KEYCODE_ALT_LEFT = 57;
    // Key code constant: Right Alt modifier key.
    static const int32_t KEYCODE_ALT_RIGHT = 58;
    // Key code constant: ''' (apostrophe) key.
    static const int32_t KEYCODE_APOSTROPHE = 75;
    // Key code constant: App switch key.
    static const int32_t KEYCODE_APP_SWITCH = 187;
    // Key code constant: Assist key.
    static const int32_t KEYCODE_ASSIST = 219;
    // Key code constant: '@' key.
    static const int32_t KEYCODE_AT = 77;
    // Key code constant: A/V Receiver input key.
    static const int32_t KEYCODE_AVR_INPUT = 182;
    // Key code constant: A/V Receiver power key.
    static const int32_t KEYCODE_AVR_POWER = 181;
    // Key code constant: 'B' key.
    static const int32_t KEYCODE_B = 30;
    // Key code constant: Back key.
    static const int32_t KEYCODE_BACK = 4;
    // Key code constant: '\' key.
    static const int32_t KEYCODE_BACKSLASH = 73;
    // Key code constant: Bookmark key.
    static const int32_t KEYCODE_BOOKMARK = 174;
    // Key code constant: Break / Pause key.
    static const int32_t KEYCODE_BREAK = 121;
    // Key code constant: Brightness Down key.
    static const int32_t KEYCODE_BRIGHTNESS_DOWN = 220;
    // Key code constant: Brightness Up key.
    static const int32_t KEYCODE_BRIGHTNESS_UP = 221;
    // Key code constant: Generic Game Pad Button #1.
    static const int32_t KEYCODE_BUTTON_1 = 188;
    // Key code constant: Generic Game Pad Button #10.
    static const int32_t KEYCODE_BUTTON_10 = 197;
    // Key code constant: Generic Game Pad Button #11.
    static const int32_t KEYCODE_BUTTON_11 = 198;
    // Key code constant: Generic Game Pad Button #12.
    static const int32_t KEYCODE_BUTTON_12 = 199;
    // Key code constant: Generic Game Pad Button #13.
    static const int32_t KEYCODE_BUTTON_13 = 200;
    // Key code constant: Generic Game Pad Button #14.
    static const int32_t KEYCODE_BUTTON_14 = 201;
    // Key code constant: Generic Game Pad Button #15.
    static const int32_t KEYCODE_BUTTON_15 = 202;
    // Key code constant: Generic Game Pad Button #16.
    static const int32_t KEYCODE_BUTTON_16 = 203;
    // Key code constant: Generic Game Pad Button #2.
    static const int32_t KEYCODE_BUTTON_2 = 189;
    // Key code constant: Generic Game Pad Button #3.
    static const int32_t KEYCODE_BUTTON_3 = 190;
    // Key code constant: Generic Game Pad Button #4.
    static const int32_t KEYCODE_BUTTON_4 = 191;
    // Key code constant: Generic Game Pad Button #5.
    static const int32_t KEYCODE_BUTTON_5 = 192;
    // Key code constant: Generic Game Pad Button #6.
    static const int32_t KEYCODE_BUTTON_6 = 193;
    // Key code constant: Generic Game Pad Button #7.
    static const int32_t KEYCODE_BUTTON_7 = 194;
    // Key code constant: Generic Game Pad Button #8.
    static const int32_t KEYCODE_BUTTON_8 = 195;
    // Key code constant: Generic Game Pad Button #9.
    static const int32_t KEYCODE_BUTTON_9 = 196;
    // Key code constant: A Button key.
    static const int32_t KEYCODE_BUTTON_A = 96;
    // Key code constant: B Button key.
    static const int32_t KEYCODE_BUTTON_B = 97;
    // Key code constant: C Button key.
    static const int32_t KEYCODE_BUTTON_C = 98;
    // Key code constant: L1 Button key.
    static const int32_t KEYCODE_BUTTON_L1 = 102;
    // Key code constant: L2 Button key.
    static const int32_t KEYCODE_BUTTON_L2 = 104;
    // Key code constant: Mode Button key.
    static const int32_t KEYCODE_BUTTON_MODE = 110;
    // Key code constant: R1 Button key.
    static const int32_t KEYCODE_BUTTON_R1 = 103;
    // Key code constant: R2 Button key.
    static const int32_t KEYCODE_BUTTON_R2 = 105;
    // Key code constant: Select Button key.
    static const int32_t KEYCODE_BUTTON_SELECT = 109;
    // Key code constant: Start Button key.
    static const int32_t KEYCODE_BUTTON_START = 108;
    // Key code constant: Left Thumb Button key.
    static const int32_t KEYCODE_BUTTON_THUMBL = 106;
    // Key code constant: Right Thumb Button key.
    static const int32_t KEYCODE_BUTTON_THUMBR = 107;
    // Key code constant: X Button key.
    static const int32_t KEYCODE_BUTTON_X = 99;
    // Key code constant: Y Button key.
    static const int32_t KEYCODE_BUTTON_Y = 100;
    // Key code constant: Z Button key.
    static const int32_t KEYCODE_BUTTON_Z = 101;
    // Key code constant: 'C' key.
    static const int32_t KEYCODE_C = 31;
    // Key code constant: Calculator special function key.
    static const int32_t KEYCODE_CALCULATOR = 210;
    // Key code constant: Calendar special function key.
    static const int32_t KEYCODE_CALENDAR = 208;
    // Key code constant: Call key.
    static const int32_t KEYCODE_CALL = 5;
    // Key code constant: Camera key.
    static const int32_t KEYCODE_CAMERA = 27;
    // Key code constant: Caps Lock key.
    static const int32_t KEYCODE_CAPS_LOCK = 115;
    // Key code constant: Toggle captions key.
    static const int32_t KEYCODE_CAPTIONS = 175;
    // Key code constant: Channel down key.
    static const int32_t KEYCODE_CHANNEL_DOWN = 167;
    // Key code constant: Channel up key.
    static const int32_t KEYCODE_CHANNEL_UP = 166;
    // Key code constant: Clear key.
    static const int32_t KEYCODE_CLEAR = 28;
    // Key code constant: ',' key.
    static const int32_t KEYCODE_COMMA = 55;
    // Key code constant: Contacts special function key.
    static const int32_t KEYCODE_CONTACTS = 207;
    // Key code constant: Copy key.
    static const int32_t KEYCODE_COPY = 278;
    // Key code constant: Left Control modifier key.
    static const int32_t KEYCODE_CTRL_LEFT = 113;
    // Key code constant: Right Control modifier key.
    static const int32_t KEYCODE_CTRL_RIGHT = 114;
    // Key code constant: Cut key.
    static const int32_t KEYCODE_CUT = 277;
    // Key code constant: 'D' key.
    static const int32_t KEYCODE_D = 32;
    // Key code constant: Backspace key.
    static const int32_t KEYCODE_DEL = 67;
    // Key code constant: Directional Pad Center key.
    static const int32_t KEYCODE_DPAD_CENTER = 23;
    // Key code constant: Directional Pad Down key.
    static const int32_t KEYCODE_DPAD_DOWN = 20;
    // Key code constant: Directional Pad Down-Left
    static const int32_t KEYCODE_DPAD_DOWN_LEFT = 269;
    // Key code constant: Directional Pad Down-Right
    static const int32_t KEYCODE_DPAD_DOWN_RIGHT = 271;
    // Key code constant: Directional Pad Left key.
    static const int32_t KEYCODE_DPAD_LEFT = 21;
    // Key code constant: Directional Pad Right key.
    static const int32_t KEYCODE_DPAD_RIGHT = 22;
    // Key code constant: Directional Pad Up key.
    static const int32_t KEYCODE_DPAD_UP = 19;
    // Key code constant: Directional Pad Up-Left
    static const int32_t KEYCODE_DPAD_UP_LEFT = 268;
    // Key code constant: Directional Pad Up-Right
    static const int32_t KEYCODE_DPAD_UP_RIGHT = 270;
    // Key code constant: DVR key.
    static const int32_t KEYCODE_DVR = 173;
    // Key code constant: 'E' key.
    static const int32_t KEYCODE_E = 33;
    // Key code constant: Japanese alphanumeric key.
    static const int32_t KEYCODE_EISU = 212;
    // Key code constant: End Call key.
    static const int32_t KEYCODE_ENDCALL = 6;
    // Key code constant: Enter key.
    static const int32_t KEYCODE_ENTER = 66;
    // Key code constant: Envelope special function key.
    static const int32_t KEYCODE_ENVELOPE = 65;
    // Key code constant: '=' key.
    static const int32_t KEYCODE_EQUALS = 70;
    // Key code constant: Escape key.
    static const int32_t KEYCODE_ESCAPE = 111;
    // Key code constant: Explorer special function key.
    static const int32_t KEYCODE_EXPLORER = 64;
    // Key code constant: 'F' key.
    static const int32_t KEYCODE_F = 34;
    // Key code constant: F1 key.
    static const int32_t KEYCODE_F1 = 131;
    // Key code constant: F10 key.
    static const int32_t KEYCODE_F10 = 140;
    // Key code constant: F11 key.
    static const int32_t KEYCODE_F11 = 141;
    // Key code constant: F12 key.
    static const int32_t KEYCODE_F12 = 142;
    // Key code constant: F2 key.
    static const int32_t KEYCODE_F2 = 132;
    // Key code constant: F3 key.
    static const int32_t KEYCODE_F3 = 133;
    // Key code constant: F4 key.
    static const int32_t KEYCODE_F4 = 134;
    // Key code constant: F5 key.
    static const int32_t KEYCODE_F5 = 135;
    // Key code constant: F6 key.
    static const int32_t KEYCODE_F6 = 136;
    // Key code constant: F7 key.
    static const int32_t KEYCODE_F7 = 137;
    // Key code constant: F8 key.
    static const int32_t KEYCODE_F8 = 138;
    // Key code constant: F9 key.
    static const int32_t KEYCODE_F9 = 139;
    // Key code constant: Camera Focus key.
    static const int32_t KEYCODE_FOCUS = 80;
    // Key code constant: Forward key.
    static const int32_t KEYCODE_FORWARD = 125;
    // Key code constant: Forward Delete key.
    static const int32_t KEYCODE_FORWARD_DEL = 112;
    // Key code constant: Function modifier key.
    static const int32_t KEYCODE_FUNCTION = 119;
    // Key code constant: 'G' key.
    static const int32_t KEYCODE_G = 35;
    // Key code constant: '`' (backtick) key.
    static const int32_t KEYCODE_GRAVE = 68;
    // Key code constant: Guide key.
    static const int32_t KEYCODE_GUIDE = 172;
    // Key code constant: 'H' key.
    static const int32_t KEYCODE_H = 36;
    // Key code constant: Headset Hook key.
    static const int32_t KEYCODE_HEADSETHOOK = 79;
    // Key code constant: Help key.
    static const int32_t KEYCODE_HELP = 259;
    // Key code constant: Japanese conversion key.
    static const int32_t KEYCODE_HENKAN = 214;
    // Key code constant: Home key.
    static const int32_t KEYCODE_HOME = 3;
    // Key code constant: 'I' key.
    static const int32_t KEYCODE_I = 37;
    // Key code constant: Info key.
    static const int32_t KEYCODE_INFO = 165;
    // Key code constant: Insert key.
    static const int32_t KEYCODE_INSERT = 124;
    // Key code constant: 'J' key.
    static const int32_t KEYCODE_J = 38;
    // Key code constant: 'K' key.
    static const int32_t KEYCODE_K = 39;
    // Key code constant: Japanese kana key.
    static const int32_t KEYCODE_KANA = 218;
    // Key code constant: Japanese katakana / hiragana key.
    static const int32_t KEYCODE_KATAKANA_HIRAGANA = 215;
    // Key code constant: 'L' key.
    static const int32_t KEYCODE_L = 40;
    // Key code constant: Language Switch key.
    static const int32_t KEYCODE_LANGUAGE_SWITCH = 204;
    // Key code constant: Last Channel key.
    static const int32_t KEYCODE_LAST_CHANNEL = 229;
    // Key code constant: '[' key.
    static const int32_t KEYCODE_LEFT_BRACKET = 71;
    // Key code constant: 'M' key.
    static const int32_t KEYCODE_M = 41;
    // Key code constant: Manner Mode key.
    static const int32_t KEYCODE_MANNER_MODE = 205;
    // Key code constant: Audio Track key.
    static const int32_t KEYCODE_MEDIA_AUDIO_TRACK = 222;
    // Key code constant: Close media key.
    static const int32_t KEYCODE_MEDIA_CLOSE = 128;
    // Key code constant: Eject media key.
    static const int32_t KEYCODE_MEDIA_EJECT = 129;
    // Key code constant: Fast Forward media key.
    static const int32_t KEYCODE_MEDIA_FAST_FORWARD = 90;
    // Key code constant: Play Next media key.
    static const int32_t KEYCODE_MEDIA_NEXT = 87;
    // Key code constant: Pause media key.
    static const int32_t KEYCODE_MEDIA_PAUSE = 127;
    // Key code constant: Play media key.
    static const int32_t KEYCODE_MEDIA_PLAY = 126;
    // Key code constant: Play/Pause media key.
    static const int32_t KEYCODE_MEDIA_PLAY_PAUSE = 85;
    // Key code constant: Play Previous media key.
    static const int32_t KEYCODE_MEDIA_PREVIOUS = 88;
    // Key code constant: Record media key.
    static const int32_t KEYCODE_MEDIA_RECORD = 130;
    // Key code constant: Rewind media key.
    static const int32_t KEYCODE_MEDIA_REWIND = 89;
    // Key code constant: Skip backward media key.
    static const int32_t KEYCODE_MEDIA_SKIP_BACKWARD = 273;
    // Key code constant: Skip forward media key.
    static const int32_t KEYCODE_MEDIA_SKIP_FORWARD = 272;
    // Key code constant: Step backward media key.
    static const int32_t KEYCODE_MEDIA_STEP_BACKWARD = 275;
    // Key code constant: Step forward media key.
    static const int32_t KEYCODE_MEDIA_STEP_FORWARD = 274;
    // Key code constant: Stop media key.
    static const int32_t KEYCODE_MEDIA_STOP = 86;
    // Key code constant: Media Top Menu key.
    static const int32_t KEYCODE_MEDIA_TOP_MENU = 226;
    // Key code constant: Menu key.
    static const int32_t KEYCODE_MENU = 82;
    // Key code constant: Left Meta modifier key.
    static const int32_t KEYCODE_META_LEFT = 117;
    // Key code constant: Right Meta modifier key.
    static const int32_t KEYCODE_META_RIGHT = 118;
    // Key code constant: '-'.
    static const int32_t KEYCODE_MINUS = 69;
    // Key code constant: End Movement key.
    static const int32_t KEYCODE_MOVE_END = 123;
    // Key code constant: Home Movement key.
    static const int32_t KEYCODE_MOVE_HOME = 122;
    // Key code constant: Japanese non-conversion key.
    static const int32_t KEYCODE_MUHENKAN = 213;
    // Key code constant: Music special function key.
    static const int32_t KEYCODE_MUSIC = 209;
    // Key code constant: Mute key.
    static const int32_t KEYCODE_MUTE = 91;
    // Key code constant: 'N' key.
    static const int32_t KEYCODE_N = 42;
    // Key code constant: Navigate in key.
    static const int32_t KEYCODE_NAVIGATE_IN = 262;
    // Key code constant: Navigate to next key.
    static const int32_t KEYCODE_NAVIGATE_NEXT = 261;
    // Key code constant: Navigate out key.
    static const int32_t KEYCODE_NAVIGATE_OUT = 263;
    // Key code constant: Navigate to previous key.
    static const int32_t KEYCODE_NAVIGATE_PREVIOUS = 260;
    // Key code constant: Notification key.
    static const int32_t KEYCODE_NOTIFICATION = 83;
    // Key code constant: Number modifier key.
    static const int32_t KEYCODE_NUM = 78;
    // Key code constant: Numeric keypad '0' key.
    static const int32_t KEYCODE_NUMPAD_0 = 144;
    // Key code constant: Numeric keypad '1' key.
    static const int32_t KEYCODE_NUMPAD_1 = 145;
    // Key code constant: Numeric keypad '2' key.
    static const int32_t KEYCODE_NUMPAD_2 = 146;
    // Key code constant: Numeric keypad '3' key.
    static const int32_t KEYCODE_NUMPAD_3 = 147;
    // Key code constant: Numeric keypad '4' key.
    static const int32_t KEYCODE_NUMPAD_4 = 148;
    // Key code constant: Numeric keypad '5' key.
    static const int32_t KEYCODE_NUMPAD_5 = 149;
    // Key code constant: Numeric keypad '6' key.
    static const int32_t KEYCODE_NUMPAD_6 = 150;
    // Key code constant: Numeric keypad '7' key.
    static const int32_t KEYCODE_NUMPAD_7 = 151;
    // Key code constant: Numeric keypad '8' key.
    static const int32_t KEYCODE_NUMPAD_8 = 152;
    // Key code constant: Numeric keypad '9' key.
    static const int32_t KEYCODE_NUMPAD_9 = 153;
    // Key code constant: Numeric keypad '+' key (for addition).
    static const int32_t KEYCODE_NUMPAD_ADD = 157;
    // Key code constant: Numeric keypad ',' key (for decimals or digit grouping).
    static const int32_t KEYCODE_NUMPAD_COMMA = 159;
    // Key code constant: Numeric keypad '/' key (for division).
    static const int32_t KEYCODE_NUMPAD_DIVIDE = 154;
    // Key code constant: Numeric keypad '.' key (for decimals or digit grouping).
    static const int32_t KEYCODE_NUMPAD_DOT = 158;
    // Key code constant: Numeric keypad Enter key.
    static const int32_t KEYCODE_NUMPAD_ENTER = 160;
    // Key code constant: Numeric keypad '=' key.
    static const int32_t KEYCODE_NUMPAD_EQUALS = 161;
    // Key code constant: Numeric keypad '(' key.
    static const int32_t KEYCODE_NUMPAD_LEFT_PAREN = 162;
    // Key code constant: Numeric keypad '*' key (for multiplication).
    static const int32_t KEYCODE_NUMPAD_MULTIPLY = 155;
    // Key code constant: Numeric keypad ')' key.
    static const int32_t KEYCODE_NUMPAD_RIGHT_PAREN = 163;
    // Key code constant: Numeric keypad '-' key (for subtraction).
    static const int32_t KEYCODE_NUMPAD_SUBTRACT = 156;
    // Key code constant: Num Lock key.
    static const int32_t KEYCODE_NUM_LOCK = 143;
    // Key code constant: 'O' key.
    static const int32_t KEYCODE_O = 43;
    // Key code constant: 'P' key.
    static const int32_t KEYCODE_P = 44;
    // Key code constant: Page Down key.
    static const int32_t KEYCODE_PAGE_DOWN = 93;
    // Key code constant: Page Up key.
    static const int32_t KEYCODE_PAGE_UP = 92;
    // Key code constant: Pairing key.
    static const int32_t KEYCODE_PAIRING = 225;
    // Key code constant: Paste key.
    static const int32_t KEYCODE_PASTE = 279;
    // Key code constant: '.' key.
    static const int32_t KEYCODE_PERIOD = 56;
    // Key code constant: Picture Symbols modifier key.
    static const int32_t KEYCODE_PICTSYMBOLS = 94;
    // Key code constant: '+' key.
    static const int32_t KEYCODE_PLUS = 81;
    // Key code constant: '#' key.
    static const int32_t KEYCODE_POUND = 18;
    // Key code constant: Power key.
    static const int32_t KEYCODE_POWER = 26;
    // Key code constant: Blue "programmable" key.
    static const int32_t KEYCODE_PROG_BLUE = 186;
    // Key code constant: Green "programmable" key.
    static const int32_t KEYCODE_PROG_GREEN = 184;
    // Key code constant: Red "programmable" key.
    static const int32_t KEYCODE_PROG_RED = 183;
    // Key code constant: Yellow "programmable" key.
    static const int32_t KEYCODE_PROG_YELLOW = 185;
    // Key code constant: 'Q' key.
    static const int32_t KEYCODE_Q = 45;
    // Key code constant: 'R' key.
    static const int32_t KEYCODE_R = 46;
    // Key code constant: ']' key.
    static const int32_t KEYCODE_RIGHT_BRACKET = 72;
    // Key code constant: Japanese Ro key.
    static const int32_t KEYCODE_RO = 217;
    // Key code constant: 'S' key.
    static const int32_t KEYCODE_S = 47;
    // Key code constant: Scroll Lock key.
    static const int32_t KEYCODE_SCROLL_LOCK = 116;
    // Key code constant: Search key.
    static const int32_t KEYCODE_SEARCH = 84;
    // Key code constant: ';' key.
    static const int32_t KEYCODE_SEMICOLON = 74;
    // Key code constant: Settings key.
    static const int32_t KEYCODE_SETTINGS = 176;
    // Key code constant: Left Shift modifier key.
    static const int32_t KEYCODE_SHIFT_LEFT = 59;
    // Key code constant: Right Shift modifier key.
    static const int32_t KEYCODE_SHIFT_RIGHT = 60;
    // Key code constant: '/' key.
    static const int32_t KEYCODE_SLASH = 76;
    // Key code constant: Sleep key.
    static const int32_t KEYCODE_SLEEP = 223;
    // Key code constant: Soft Left key.
    static const int32_t KEYCODE_SOFT_LEFT = 1;
    // Key code constant: Soft Right key.
    static const int32_t KEYCODE_SOFT_RIGHT = 2;
    // Key code constant: put device to sleep unless a wakelock is held.
    static const int32_t KEYCODE_SOFT_SLEEP = 276;
    // Key code constant: Space key.
    static const int32_t KEYCODE_SPACE = 62;
    // Key code constant: '*' key.
    static const int32_t KEYCODE_STAR = 17;
    // Key code constant: Set-top-box input key.
    static const int32_t KEYCODE_STB_INPUT = 180;
    // Key code constant: Set-top-box power key.
    static const int32_t KEYCODE_STB_POWER = 179;
    // Key code constant: Generic stem key 1 for Wear
    static const int32_t KEYCODE_STEM_1 = 265;
    // Key code constant: Generic stem key 2 for Wear
    static const int32_t KEYCODE_STEM_2 = 266;
    // Key code constant: Generic stem key 3 for Wear
    static const int32_t KEYCODE_STEM_3 = 267;
    // Key code constant: Primary stem key for Wear Main power/reset button on watch.
    static const int32_t KEYCODE_STEM_PRIMARY = 264;
    // Key code constant: Switch Charset modifier key.
    static const int32_t KEYCODE_SWITCH_CHARSET = 95;
    // Key code constant: Symbol modifier key.
    static const int32_t KEYCODE_SYM = 63;
    // Key code constant: System Request / Print Screen key.
    static const int32_t KEYCODE_SYSRQ = 120;
    // Key code constant: Consumed by the system for navigation down
    static const int32_t KEYCODE_SYSTEM_NAVIGATION_DOWN = 281;
    // Key code constant: Consumed by the system for navigation left
    static const int32_t KEYCODE_SYSTEM_NAVIGATION_LEFT = 282;
    // Key code constant: Consumed by the system for navigation right
    static const int32_t KEYCODE_SYSTEM_NAVIGATION_RIGHT = 283;
    // Key code constant: Consumed by the system for navigation up
    static const int32_t KEYCODE_SYSTEM_NAVIGATION_UP = 280;
    // Key code constant: 'T' key.
    static const int32_t KEYCODE_T = 48;
    // Key code constant: Tab key.
    static const int32_t KEYCODE_TAB = 61;
    // Key code constant: TV key.
    static const int32_t KEYCODE_TV = 170;
    // Key code constant: Antenna/Cable key.
    static const int32_t KEYCODE_TV_ANTENNA_CABLE = 242;
    // Key code constant: Audio description key.
    static const int32_t KEYCODE_TV_AUDIO_DESCRIPTION = 252;
    // Key code constant: Audio description mixing volume down key.
    static const int32_t KEYCODE_TV_AUDIO_DESCRIPTION_MIX_DOWN = 254;
    // Key code constant: Audio description mixing volume up key.
    static const int32_t KEYCODE_TV_AUDIO_DESCRIPTION_MIX_UP = 253;
    // Key code constant: Contents menu key.
    static const int32_t KEYCODE_TV_CONTENTS_MENU = 256;
    // Key code constant: TV data service key.
    static const int32_t KEYCODE_TV_DATA_SERVICE = 230;
    // Key code constant: TV input key.
    static const int32_t KEYCODE_TV_INPUT = 178;
    // Key code constant: Component #1 key.
    static const int32_t KEYCODE_TV_INPUT_COMPONENT_1 = 249;
    // Key code constant: Component #2 key.
    static const int32_t KEYCODE_TV_INPUT_COMPONENT_2 = 250;
    // Key code constant: Composite #1 key.
    static const int32_t KEYCODE_TV_INPUT_COMPOSITE_1 = 247;
    // Key code constant: Composite #2 key.
    static const int32_t KEYCODE_TV_INPUT_COMPOSITE_2 = 248;
    // Key code constant: HDMI #1 key.
    static const int32_t KEYCODE_TV_INPUT_HDMI_1 = 243;
    // Key code constant: HDMI #2 key.
    static const int32_t KEYCODE_TV_INPUT_HDMI_2 = 244;
    // Key code constant: HDMI #3 key.
    static const int32_t KEYCODE_TV_INPUT_HDMI_3 = 245;
    // Key code constant: HDMI #4 key.
    static const int32_t KEYCODE_TV_INPUT_HDMI_4 = 246;
    // Key code constant: VGA #1 key.
    static const int32_t KEYCODE_TV_INPUT_VGA_1 = 251;
    // Key code constant: Media context menu key.
    static const int32_t KEYCODE_TV_MEDIA_CONTEXT_MENU = 257;
    // Key code constant: Toggle Network key.
    static const int32_t KEYCODE_TV_NETWORK = 241;
    // Key code constant: Number entry key.
    static const int32_t KEYCODE_TV_NUMBER_ENTRY = 234;
    // Key code constant: TV power key.
    static const int32_t KEYCODE_TV_POWER = 177;
    // Key code constant: Radio key.
    static const int32_t KEYCODE_TV_RADIO_SERVICE = 232;
    // Key code constant: Satellite key.
    static const int32_t KEYCODE_TV_SATELLITE = 237;
    // Key code constant: BS key.
    static const int32_t KEYCODE_TV_SATELLITE_BS = 238;
    // Key code constant: CS key.
    static const int32_t KEYCODE_TV_SATELLITE_CS = 239;
    // Key code constant: BS/CS key.
    static const int32_t KEYCODE_TV_SATELLITE_SERVICE = 240;
    // Key code constant: Teletext key.
    static const int32_t KEYCODE_TV_TELETEXT = 233;
    // Key code constant: Analog Terrestrial key.
    static const int32_t KEYCODE_TV_TERRESTRIAL_ANALOG = 235;
    // Key code constant: Digital Terrestrial key.
    static const int32_t KEYCODE_TV_TERRESTRIAL_DIGITAL = 236;
    // Key code constant: Timer programming key.
    static const int32_t KEYCODE_TV_TIMER_PROGRAMMING = 258;
    // Key code constant: Zoom mode key.
    static const int32_t KEYCODE_TV_ZOOM_MODE = 255;
    // Key code constant: 'U' key.
    static const int32_t KEYCODE_U = 49;
    // Key code constant: Unknown key code.
    static const int32_t KEYCODE_UNKNOWN = 0;
    // Key code constant: 'V' key.
    static const int32_t KEYCODE_V = 50;
    // Key code constant: Voice Assist key.
    static const int32_t KEYCODE_VOICE_ASSIST = 231;
    // Key code constant: Volume Down key.
    static const int32_t KEYCODE_VOLUME_DOWN = 25;
    // Key code constant: Volume Mute key.
    static const int32_t KEYCODE_VOLUME_MUTE = 164;
    // Key code constant: Volume Up key.
    static const int32_t KEYCODE_VOLUME_UP = 24;
    // Key code constant: 'W' key.
    static const int32_t KEYCODE_W = 51;
    // Key code constant: Wakeup key.
    static const int32_t KEYCODE_WAKEUP = 224;
    // Key code constant: Window key.
    static const int32_t KEYCODE_WINDOW = 171;
    // Key code constant: 'X' key.
    static const int32_t KEYCODE_X = 52;
    // Key code constant: 'Y' key.
    static const int32_t KEYCODE_Y = 53;
    // Key code constant: Japanese Yen key.
    static const int32_t KEYCODE_YEN = 216;
    // Key code constant: 'Z' key.
    static const int32_t KEYCODE_Z = 54;
    // Key code constant: Japanese full-width / half-width key.
    static const int32_t KEYCODE_ZENKAKU_HANKAKU = 211;
    // Key code constant: Zoom in key.
    static const int32_t KEYCODE_ZOOM_IN = 168;
    // Key code constant: Zoom out key.
    static const int32_t KEYCODE_ZOOM_OUT = 169;
    // This constant was deprecated in API level 3. There are now more than MAX_KEYCODE keycodes. Use getMaxKeyCode() instead.
    static const int32_t MAX_KEYCODE = 84;
    // This mask is used to check whether the left ALT meta key is pressed.
    static const int32_t META_ALT_LEFT_ON = 16;
    // This mask is a combination of META_ALT_ON, META_ALT_LEFT_ON and META_ALT_RIGHT_ON.
    static const int32_t META_ALT_MASK = 50;
    // This mask is used to check whether one of the ALT meta keys is pressed.
    static const int32_t META_ALT_ON = 2;
    // This mask is used to check whether the right the ALT meta key is pressed.
    static const int32_t META_ALT_RIGHT_ON = 32;
    // This mask is used to check whether the CAPS LOCK meta key is on.
    static const int32_t META_CAPS_LOCK_ON = 1048576;
    // This mask is used to check whether the left CTRL meta key is pressed.
    static const int32_t META_CTRL_LEFT_ON = 8192;
    // This mask is a combination of META_CTRL_ON, META_CTRL_LEFT_ON and META_CTRL_RIGHT_ON.
    static const int32_t META_CTRL_MASK = 28672;
    // This mask is used to check whether one of the CTRL meta keys is pressed.
    static const int32_t META_CTRL_ON = 4096;
    // This mask is used to check whether the right CTRL meta key is pressed.
    static const int32_t META_CTRL_RIGHT_ON = 16384;
    // This mask is used to check whether the FUNCTION meta key is pressed.
    static const int32_t META_FUNCTION_ON = 8;
    // This mask is used to check whether the left META meta key is pressed.
    static const int32_t META_META_LEFT_ON = 131072;
    // This mask is a combination of META_META_ON, META_META_LEFT_ON and META_META_RIGHT_ON.
    static const int32_t META_META_MASK = 458752;
    // This mask is used to check whether one of the META meta keys is pressed.
    static const int32_t META_META_ON = 65536;
    // This mask is used to check whether the right META meta key is pressed.
    static const int32_t META_META_RIGHT_ON = 262144;
    // This mask is used to check whether the NUM LOCK meta key is on.
    static const int32_t META_NUM_LOCK_ON = 2097152;
    // This mask is used to check whether the SCROLL LOCK meta key is on.
    static const int32_t META_SCROLL_LOCK_ON = 4194304;
    // This mask is used to check whether the left SHIFT meta key is pressed.
    static const int32_t META_SHIFT_LEFT_ON = 64;
    // This mask is a combination of META_SHIFT_ON, META_SHIFT_LEFT_ON and META_SHIFT_RIGHT_ON.
    static const int32_t META_SHIFT_MASK = 193;
    // This mask is used to check whether one of the SHIFT meta keys is pressed.
    static const int32_t META_SHIFT_ON = 1;
    // This mask is used to check whether the right SHIFT meta key is pressed.
    static const int32_t META_SHIFT_RIGHT_ON = 128;
    // This mask is used to check whether the SYM meta key is pressed.
    static const int32_t META_SYM_ON = 4;

    // Create a new key event.
    ANDROID_EXPORT KeyEvent(int32_t action, int32_t code);
    ANDROID_EXPORT KeyEvent(std::chrono::milliseconds downTime, std::chrono::milliseconds eventTime, int32_t action, int32_t code, int32_t repeat);
    ANDROID_EXPORT KeyEvent(std::chrono::milliseconds downTime, std::chrono::milliseconds eventTime, int32_t action, int32_t code, int32_t repeat, int32_t metaState);
    ANDROID_EXPORT KeyEvent(std::chrono::milliseconds downTime, std::chrono::milliseconds eventTime, int32_t action, int32_t code, int32_t repeat, int32_t metaState, int32_t deviceId, int32_t scancode);
    ANDROID_EXPORT KeyEvent(std::chrono::milliseconds downTime, std::chrono::milliseconds eventTime, int32_t action, int32_t code, int32_t repeat, int32_t metaState, int32_t deviceId, int32_t scancode, int32_t flags);
    ANDROID_EXPORT KeyEvent(std::chrono::milliseconds downTime, std::chrono::milliseconds eventTime, int32_t action, int32_t code, int32_t repeat, int32_t metaState, int32_t deviceId, int32_t scancode, int32_t flags, int32_t source);
    // Create a new key event for a string of characters.
    ANDROID_EXPORT KeyEvent(std::chrono::milliseconds time, String& characters, int32_t deviceId, int32_t flags);
    // Make an exact copy of an existing key event.
    ANDROID_EXPORT KeyEvent(const KeyEvent& origEvent);
    ANDROID_EXPORT KeyEvent(KeyEvent&& origEvent);

    ANDROID_EXPORT virtual ~KeyEvent() = default;

    // Retrieve the action of this key event.
    ANDROID_EXPORT int32_t getAction();
    // Get the character that is produced by putting accent on the character c.
    ANDROID_EXPORT static int32_t getDeadChar(int32_t accent, int32_t c);
    // Retrieve the time of the most recent key down event, in the uptimeMillis(); time base.
    ANDROID_EXPORT std::chrono::milliseconds getDownTime();
    // Retrieve the time this event occurred, in the uptimeMillis(); time base.
    ANDROID_EXPORT std::chrono::milliseconds getEventTime() override;
    // Returns the flags for this key event.
    ANDROID_EXPORT int32_t getFlags();
    // Retrieve the key code of the key event.
    ANDROID_EXPORT int32_t getKeyCode();
    // Returns the state of the meta keys.
    ANDROID_EXPORT int32_t getMetaState();
    // Gets a mask that includes all valid modifier key meta state bits.
    ANDROID_EXPORT static int32_t getModifierMetaStateMask();
    // Returns the state of the modifier keys.
    ANDROID_EXPORT int32_t getModifiers();

    // Gets the number or symbol associated with the key.
    ANDROID_EXPORT virtual char getNumber();
    // Retrieve the repeat count of the event.
    ANDROID_EXPORT int32_t getRepeatCount();
    // Retrieve the hardware key id of this key event.These values are not reliable and vary from device to device.
    ANDROID_EXPORT int32_t getScanCode();
    // Gets the source of the event.
    ANDROID_EXPORT int32_t getSource() override;
    // Gets the Unicode character generated by the specified key and meta key state combination.
    ANDROID_EXPORT virtual int32_t getUnicodeChar(int32_t metaState);
    // Gets the Unicode character generated by the specified key and meta key state combination.
    ANDROID_EXPORT virtual int32_t getUnicodeChar();

    // Returns true if only the specified modifiers keys are pressed.
    ANDROID_EXPORT bool hasModifiers(int32_t modifiers);
    // Returns true if no modifier keys are pressed.
    ANDROID_EXPORT bool hasNoModifiers();

    // Returns the pressed state of the ALT meta key.
    ANDROID_EXPORT bool isAltPressed();
    // For ACTION_UP events, indicates that the event has been canceled as per FLAG_CANCELED.
    ANDROID_EXPORT bool isCanceled();
    // Returns the locked state of the CAPS LOCK meta key.
    ANDROID_EXPORT bool isCapsLockOn();
    // Returns the pressed state of the CTRL meta key.
    ANDROID_EXPORT bool isCtrlPressed();
    // Returns the pressed state of the FUNCTION meta key.
    ANDROID_EXPORT bool isFunctionPressed();

    // Returns true if the specified keycode is a gamepad button.
    ANDROID_EXPORT static bool isGamepadButton(int32_t keyCode);

    // For ACTION_DOWN events, indicates that the event has been canceled as per FLAG_LONG_PRESS.
    ANDROID_EXPORT bool isLongPress();
    // Returns the pressed state of the META meta key.
    ANDROID_EXPORT bool isMetaPressed();
    // Returns true if this key code is a modifier key.
    ANDROID_EXPORT static bool isModifierKey(int32_t keyCode);
    // Returns the locked state of the NUM LOCK meta key.
    ANDROID_EXPORT bool isNumLockOn();
    // Returns true if this key produces a glyph.
    ANDROID_EXPORT virtual bool isPrintingKey();
    // Returns the locked state of the SCROLL LOCK meta key.
    ANDROID_EXPORT bool isScrollLockOn();
    // Returns the pressed state of the SHIFT meta key.
    ANDROID_EXPORT bool isShiftPressed();
    // Returns the pressed state of the SYM meta key.
    ANDROID_EXPORT bool isSymPressed();
    // Is this a system key? System keys can not be used for menu shortcuts.
    ANDROID_EXPORT bool isSystem();

    // For ACTION_UP events, indicates that the event is still being tracked from its initial down event as per FLAG_TRACKING.
    ANDROID_EXPORT bool isTracking();

    // Gets a keycode by its symbolic name such as "KEYCODE_A" or an equivalent numeric constant such as "1001".
    ANDROID_EXPORT static int32_t keyCodeFromString(String& symbolicName);
    // Returns a string that represents the symbolic name of the specified keycode such as "KEYCODE_A", "KEYCODE_DPAD_UP", or an equivalent numeric constant such as "1001" if unknown.
    ANDROID_EXPORT static String& keyCodeToString(int32_t keyCode);
    // Returns true if only the specified modifier keys are pressed according to the specified meta state.
    ANDROID_EXPORT static bool metaStateHasModifiers(int32_t metaState, int32_t modifiers);
    // Returns true if no modifiers keys are pressed according to the specified meta state.
    ANDROID_EXPORT static bool metaStateHasNoModifiers(int32_t metaState);
    // Normalizes the specified meta state.
    ANDROID_EXPORT static int32_t normalizeMetaState(int32_t metaState);

    // Modifies the source of the event.
    ANDROID_EXPORT void setSource(int32_t source);

    // Call this during onKeyDown(int32_t, KeyEvent); to have the system track the key through its up (possibly including a std::chrono::milliseconds press);.
    ANDROID_EXPORT void startTracking();

private:
    std::chrono::milliseconds m_eventTime { 0 };
    std::chrono::milliseconds m_downTime { 0 };
    int32_t m_action { 0 };
    int32_t m_code { -1 };
    int32_t m_repeat { 0 };
    int32_t m_metaState { 0 };
    int32_t m_scancode { 0 };
    int32_t m_flags { 0 };
    int32_t m_source { 0 };

    int32_t m_nativeKeyCode { 0 };
    int32_t m_virtualKeyCode { 0 };
    bool m_isSystemKey { false };
};

} // namespace view
} // namespace android

using KeyEvent = android::view::KeyEvent;
